<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is protected by Copyright. Please refer to the COPYRIGHT file
distributed with this source distribution.

This file is part of REDHAWK SourceVITA49.

REDHAWK SourceVITA49 is free software: you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

REDHAWK SourceVITA49 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License along
with this program.  If not, see http://www.gnu.org/licenses/.
-->
<!DOCTYPE properties PUBLIC "-//JTRS//DTD SCA V2.2.2 PRF//EN" "properties.dtd">
<properties>
  <simple id="interface" mode="readwrite" type="string">
    <description>Specifies the interface used to receive the VITA49 packets. </description>
    <value>eth1</value>
    <kind kindtype="configure"/>
    <action type="external"/>
  </simple>
  <struct id="attachment_override" mode="readwrite">
    <description>If true, the values for the multicast_address, vlan, and port, properties will be used instead of those values attained by the attach call.</description>
    <simple id="attachment_override::enabled" mode="readwrite" name="enabled" type="boolean">
      <description>When set to true, attach call will be ignored and the component will use the attachment override values instead.</description>
      <value>false</value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="attachment_override::ip_address" name="ip_address" type="string">
      <description>IP address to connect to.</description>
      <value>127.0.0.1</value>
      <kind kindtype="configure"/>
    </simple>
    <simple id="attachment_override::vlan" name="vlan" type="ushort">
      <description>Virtual LAN number to attach to.</description>
      <value>0</value>
      <kind kindtype="configure"/>
    </simple>
    <simple id="attachment_override::port" name="port" type="long">
      <description>Port number for the interface.</description>
      <value>12344</value>
      <kind kindtype="configure"/>
    </simple>
    <simple id="transportMethod_override::use_udp_protocol" mode="readwrite" name="use_udp_protocol" type="boolean">
      <description>If set to true the packet will use UDP protocol. If false the packet will use TCP. However, if the address fails in to the multicast range, the protocol will be UDP and ignore this setting.</description>
      <value>true</value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <configurationkind kindtype="configure"/>
  </struct>
  <struct id="connection_status" mode="readonly">
    <description>connection feedback information from the component</description>
    <simple id="connection_status::input_enabled" mode="readonly" name="input_enabled" type="boolean">
      <description>true if the source is currently subscribed</description>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="connection_status::input_ip_address" mode="readonly" name="input_ip_address" type="string">
      <description>input address currently subscribed to</description>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="connection_status::input_port" mode="readonly" name="input_port" type="ushort">
      <description>input port currently connected to</description>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="connection_status::input_vlan" mode="readonly" name="input_vlan" type="ushort">
      <description>input vlan</description>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="connection_status::packets_missing" mode="readonly" name="packets_missing" type="ulong">
      <description>running number of dropped/missing packets from the stream</description>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="connection_status::input_sample_rate" mode="readonly" name="input_sample_rate" type="double">
      <description>input samplerate from the VITA49 packet</description>
      <units>SPS</units>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="connection_status::data_throughput" mode="readwrite" name="data_throughput" type="double">
      <description>This is the estimated throughput for the connection in bits/second.</description>
      <units>BPS</units>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="connection_status::waiting_for_context_packet" mode="readwrite" name="waiting_for_context_packet" type="boolean">
      <description>Is the sourceVITA49 waiting for a valid context packet?</description>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <configurationkind kindtype="configure"/>
  </struct>
  <struct id="VITA49Processing_override" mode="readwrite">
    <description>If true,  will be used instead of those values attained by the attach call.
Possible settings only compatiable with VITA49 Spectrum Survey Profile</description>
    <simple id="VITA49Processing_override::enable" name="enable" type="boolean">
      <description>Override the context packet for processing?</description>
      <value>false</value>
      <units>boolean</units>
    </simple>
    <simple id="transportMethod_override::VRL_frames" mode="readwrite" name="VRL_frames" type="boolean">
      <description>does the packet have VRL frameing structure?</description>
      <value>false</value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="VITA49Processing_override::processing_efficient" mode="readwrite" name="processing_efficient" type="boolean">
      <description>Is the packet's data 32 bit aligned (processing efficient) or not (linkEfficient)?

Rule 6.1.6.2-1: Item Packing Fields shall be arranged in the 32-bit wide payload region either according to link-efficient rules or according to processing-efficient rules. All payloads in an IF Data Packet Stream shall be packed identically.

Rule 6.1.6.2-2: When link-efficient packing is implemented all bits in each 32-bit word shall be used for the packing of Item Packing Fields. The only exception is the last 32-bit payload word, which may be only partially filled. Each consecutive Item Packing Field shall reside immediately to the right of the previous one. When the remaining bits in a 32-bit word are fewer than the size of an Item Packing Field, the left-most bits of the next Item Packing Field shall be loaded into the available bit positions. The remaining portion of such an Item Packing Field shall occupy the left-most positions of the next 32-bit word. In this way, Item Packing Fields shall "wrap" from one
32-bit word to the next.
</description>
      <value>true</value>
      <enumerations>
        <enumeration label="link_efficient" value="false"/>
        <enumeration label="processing_efficient" value="true"/>
      </enumerations>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="VITA49Processing_override::real_complex_type" mode="readwrite" name="real_complex_type" type="long">
      <description>Rule 6.1.6.4-1: An IF Data Packet Class shall use one of the following Data Sample formats:
1. Real samples
2. Complex Cartesian samples (i.e. in-phase and quadrature components)
</description>
      <value>1</value>
      <enumerations>
        <enumeration label="real" value="0"/>
        <enumeration label="complexCartesian" value="1"/>
      </enumerations>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="VITA49Processing_override::data_item_format" mode="readwrite" name="data_item_format" type="longlong">
      <description>Sets the type of data based on the VITA49 Spectrum Survey Profile</description>
      <value>3</value>
      <enumerations>
        <enumeration label="DataType_UInt1" value="0"/>
        <enumeration label="DataType_UInt4" value="1"/>
        <enumeration label="DataType_Int8" value="2"/>
        <enumeration label="DataType_int16" value="3"/>
        <enumeration label="DataType_UInt8" value="4"/>
        <enumeration label="DataType_UInt16" value="5"/>
        <enumeration label="DataType_Float" value="6"/>
        <enumeration label="DataType_Double" value="7"/>
        <enumeration label="DataType_Int32" value="8"/>
        <enumeration label="DataType_Uint32" value="9"/>
        <enumeration label="DataType_Int64" value="10"/>
        <enumeration label="DataType_Uint64" value="11"/>
      </enumerations>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="VITA49Processing_override::repeating" mode="readwrite" name="repeating" type="ulong">
      <description>Rule 6.1.6.3-6: When Sample-Component Repeating is used with complex Cartesian Data Samples, the number of "I" Data Items specified by the Repeat Count parameter shall be packed into sequential Item Packing Fields with earlier Data Items going into lower-numbered Item Packing Fields. This shall be followed by the corresponding "Q" Data Items similarly arranged. The Repeat Count shall range from one to 65,536 with a value of one indicating that Sample-Component Repeating is not in use.
</description>
      <value>1</value>
      <units>number of times the packet may repeat</units>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="VITA49Processing_override::channel_tag_size" mode="readwrite" name="channel_tag_size" type="ulong">
      <description>Definition 6.1.6.3-1: A Channel is an independent Data Sample stream within an IF Data Packet Stream.
</description>
      <value>0</value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="VITA49Processing_override::event_tag_size" mode="readwrite" name="event_tag_size" type="ulong">
      <description>Definition 6.1.6.1-3: An Event Tag is a bit used to indicate that a signal-related or processing-related event has occurred coincident with a Data Item in the payload.
</description>
      <value>0</value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="VITA49Processing_override::vector_size" mode="readwrite" name="vector_size" type="ulong">
      <description>Rule 6.1.6.3-10: Sample Vector size may range from one to 65,535. A value of zero or one shall indicate that Sample Vectors are not in use.
</description>
      <value>1</value>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <configurationkind kindtype="configure"/>
  </struct>
  <struct id="advanced_configuration" mode="readwrite">
    <description>These are the advanced configuration properites for the component. Do not change these unless there is a good rason to.</description>
    <simple id="buffer_size" mode="readwrite" type="long">
      <description>Buffer size for VITA49 packets. This value will be reset to the maximum of this value or the corbaTransferSize (ie - the buffer must be large enough to account for the corba buffering).</description>
      <value>4096000</value>
      <units>bytes</units>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="corba_transfersize" mode="readwrite" type="ulong">
      <description>User specified size for each CORBA object transfer (must be less than maximum CORBA transfer size of 2048000 bytes). If set to 0, the default transfer size is the maximum CORBA transfer size. If the specified size must be exact for every transfer, set the timeoutInSec property to a large value, in essence allowing the buffer to fill to the requested transfer size.</description>
      <value>0</value>
      <units>bytes</units>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="poll_in_time" mode="readwrite" type="ulong">
      <description>Time in milliseconds before the receive function returns, with or without a complete packet.</description>
      <value>100</value>
      <units>ms</units>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <simple id="vita49_packet_size" mode="readwrite" type="ulong">
      <description>This is the number of bytes to be received from the socket. Default is for an MTU of 1500. </description>
      <value>1500</value>
      <units>bytes</units>
      <kind kindtype="configure"/>
      <action type="external"/>
    </simple>
    <configurationkind kindtype="configure"/>
  </struct>
</properties>
